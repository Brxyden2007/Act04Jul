------------------------------------------------------------------------
//////////////////////////// CONSULTAS MULTITABLAS /////////////////////
------------------------------------------------------------------------

-------------------------------------------------------------------
| 		        Primer Paso (Punto 1) 			  |
-------------------------------------------------------------------

1. Listar todos los pedidos y el cliente asociado.

Bien, nos pide que listemos los pedidos dependiendo el cliente asociado, para esto, se usará esta consulta.

SELECT 
  p.id AS pedido_id,
  p.fecha,
  p.total,
  c.id AS cliente_id,
  c.nombre AS nombre_cliente
FROM pedidos p
JOIN clientes c ON p.cliente_id = c.id;


En la cual, saldría el id del pedido, la fecha, el total, la id del cliente y el nombre del cliente: 

+-----------+------------+--------+------------+----------------+
| pedido_id | fecha      | total  | cliente_id | nombre_cliente |
+-----------+------------+--------+------------+----------------+
|         1 | 2025-06-01 | 105.00 |          1 | Brayden Poveda |
|         2 | 2025-06-02 | 120.00 |          2 | Sharon Acosta  |
+-----------+------------+--------+------------+----------------+

-------------------------------------------------------------------
| 		        Segundo Paso (Punto 2) 			  |
-------------------------------------------------------------------

2. Mostrar la ubicación de cada cliente en sus pedidos

En este caso, podemos mostrar la ubicación de cada cliente, gracias a las variables que se establecen, primero empezamos con los pedidos y después filtramos los clientes, ya a lo ultimo, lo mas relevante, es la ubicación entera del cliente.


SELECT 
  p.id AS pedido_id,
  p.fecha,
  c.nombre AS nombre_cliente,
  u.direccion, u.ciudad, u.estado, u.pais
FROM pedidos p
JOIN clientes c ON p.cliente_id = c.id
JOIN ubicaciones u ON c.id = u.entidad_id AND u.tipo_entidad = 'cliente';

Quedaría asi:

+-----------+------------+----------------+-------------------+----------+-----------+----------+
| pedido_id | fecha      | nombre_cliente | direccion         | ciudad   | estado    | pais     |
+-----------+------------+----------------+-------------------+----------+-----------+----------+
|         1 | 2025-06-01 | Brayden Poveda | Cra 33 #29-06     | Giron    | Santander | Colombia |
|         2 | 2025-06-02 | Sharon Acosta  | Calle 101 #22a-51 | Provenza | Santander | Colombia |
+-----------+------------+----------------+-------------------+----------+-----------+----------+

-------------------------------------------------------------------
| 		        Tercer Paso (Punto 3) 			  |
-------------------------------------------------------------------

3. Listar productos junto con el proveedor y tipo de producto.

Bien, en este caso, la consulta nos permite mostrar el contenido del producto y el nombre de su proveedor, también su categoría(tipo_producto), junto a su precio.

SELECT 
  p.id AS producto_id,
  p.nombre AS nombre_producto,
  p.precio,
  pr.nombre AS nombre_proveedor,
  tp.tipo_nombre AS tipo_producto
FROM productos p
JOIN proveedores pr ON p.proveedor_id = pr.id
JOIN tiposproductos tp ON p.tipo_id = tp.id;

Se vería así:

+-------------+----------------------+---------+------------------+---------------+
| producto_id | nombre_producto      | precio  | nombre_proveedor | tipo_producto |
+-------------+----------------------+---------+------------------+---------------+
|           1 | Laptop Pro 15        | 3500.00 | Campuslands      | Tecnología    |
|           2 | Mouse Gamer RGB      |  120.50 | Campuslands      | Tecnología    |
|           3 | Impresora Láser X120 |  900.00 | Campuslands      | Tecnología    |
|           4 | Resma de papel carta |   25.00 | PeluchinShop     | Papelería     |
|           5 | Corona de reyes      |  150.00 | PeluchinShop     | Repostería    |
+-------------+----------------------+---------+------------------+---------------+7



-------------------------------------------------------------------
| 		        Cuarto Paso (Punto 4) 			  |
-------------------------------------------------------------------

4. Consultar todos los empleados que gestionan pedidos de clientes en una ciudad específica.

Bien, en este caso, podremos consultar la ciudad del cliente y el empleado que se encarga de el


SELECT DISTINCT
  e.id AS empleado_id,
  e.nombre_empleado,
  u.ciudad
FROM pedidos p
JOIN pedidosempleados pe ON p.id = pe.pedido_id
JOIN datosempleados e ON pe.empleado_id = e.id
JOIN clientes c ON p.cliente_id = c.id
JOIN ubicaciones u ON c.id = u.entidad_id AND u.tipo_entidad = 'cliente'
WHERE u.ciudad = 'Provenza';

+-------------+-----------------+----------+
| empleado_id | nombre_empleado | ciudad   |
+-------------+-----------------+----------+
|           4 | Juan Romero     | Provenza |
+-------------+-----------------+----------+

Quedaria asi


-------------------------------------------------------------------
| 		        Quinto Paso (Punto 5) 			  |
-------------------------------------------------------------------

5. Consultar los 5 productos más vendidos.

Aquí hay un problemita, y es que al no tener tantos datos, solo salieron las 2 cosas mas vendidas (las únicas vendidas)

SELECT 
  p.id AS producto_id,
  p.nombre AS nombre_producto,
  SUM(dp.cantidad) AS total_vendido
FROM detallespedido dp
JOIN productos p ON dp.producto_id = p.id
GROUP BY p.id, p.nombre
ORDER BY total_vendido DESC
LIMIT 5;

RESULTADO: 

+-------------+-----------------+---------------+
| producto_id | nombre_producto | total_vendido |
+-------------+-----------------+---------------+
|           2 | Mouse Gamer RGB |             2 |
|           1 | Laptop Pro 15   |             1 |
+-------------+-----------------+---------------+

SUM = Para sumar cantidades

-------------------------------------------------------------------
| 		        Sexto Paso (Punto 6) 			  |
-------------------------------------------------------------------

6. Obtener la cantidad total de pedidos por cliente y ciudad.

Vale, podemos obtener el total de pedidos por cliente y ciudad, tal y como se refleja en la tabla

SELECT 
  c.id AS cliente_id,
  c.nombre AS nombre_cliente,
  u.ciudad,
  COUNT(p.id) AS total_pedidos
FROM clientes c
LEFT JOIN ubicaciones u ON c.id = u.entidad_id AND u.tipo_entidad = 'cliente'
LEFT JOIN pedidos p ON c.id = p.cliente_id
GROUP BY c.id, c.nombre, u.ciudad
ORDER BY total_pedidos DESC;

+------------+-------------------+----------+---------------+
| cliente_id | nombre_cliente    | ciudad   | total_pedidos |
+------------+-------------------+----------+---------------+
|          1 | Brayden Poveda    | Giron    |             1 |
|          2 | Sharon Acosta     | Provenza |             1 |
|          3 | Carlos de la Cruz | Tlaxcala |             0 |
+------------+-------------------+----------+---------------+

-------------------------------------------------------------------
| 		        Septimo Paso (Punto 7) 			  |
-------------------------------------------------------------------

7. Listar clientes y proveedores en la misma ciudad.

Para esto, tuve que asignar / cambiar la ubicación del proveedor, en este caso Campuslands, para que se pueda establecer en Girón para que quede asignado a un cliente, en este caso:


SELECT 
  c.id AS cliente_id,
  c.nombre AS nombre_cliente,
  p.id AS proveedor_id,
  p.nombre AS nombre_proveedor,
  u1.ciudad
FROM clientes c
JOIN ubicaciones u1 ON c.id = u1.entidad_id AND u1.tipo_entidad = 'cliente'
JOIN ubicaciones u2 ON u1.ciudad = u2.ciudad AND u2.tipo_entidad = 'proveedor'
JOIN proveedores p ON u2.entidad_id = p.id
ORDER BY u1.ciudad;

RESULTADO: 

+------------+----------------+--------------+------------------+--------+
| cliente_id | nombre_cliente | proveedor_id | nombre_proveedor | ciudad |
+------------+----------------+--------------+------------------+--------+
|          1 | Brayden Poveda |            1 | Campuslands      | Giron  |
+------------+----------------+--------------+------------------+--------+

-------------------------------------------------------------------
| 		        Octavo Paso (Punto 8) 			  |
-------------------------------------------------------------------

8. Mostrar el total de ventas agrupado por tipo de producto.

Para este caso, decidí reunir todos los tipos de producto, tanto los que no tienen algún tipo de venta como los que sí: 

SELECT 
  tp.tipo_nombre,
  COALESCE(SUM(dp.cantidad * p.precio), 0) AS total_ventas
FROM tiposproductos tp
LEFT JOIN productosp ON p.tipo_id = tp.id
LEFT JOIN detallespedido dp ON dp.producto_id = p.id
GROUP BY tp.tipo_nombre
ORDER BY total_ventas DESC;

RESULTADO: 

+-------------+--------------+
| tipo_nombre | total_ventas |
+-------------+--------------+
| Tecnología  |      3741.00 |
| Papelería   |         0.00 |
| Repostería  |         0.00 |
+-------------+--------------+


-------------------------------------------------------------------
| 		        Noveno Paso (Punto 9) 			  |
-------------------------------------------------------------------

9. Listar empleados que gestionan pedidos de productos de un proveedor específico

Para este caso, implemente varios JOIN para poder hacer que se entrelacen el uno al otro, por ejemplo, el proveedores tiene nombre de campus, asi que dará el empleado del proveedor nombre campuslands.

SELECT 
  e.id AS empleado_id,
  e.nombre_empleado,
  pr.nombre AS proveedor_nombre,
  p.id AS pedido_id
FROM pedidosempleados pe
JOIN datosempleados e ON pe.empleado_id = e.id
JOIN pedidos p ON pe.pedido_id = p.id
JOIN detallespedido dp ON p.id = dp.pedido_id
JOIN productos prod ON dp.producto_id = prod.id
JOIN proveedores pr ON prod.proveedor_id = pr.id
WHERE pr.nombre = 'Campuslands'
GROUP BY e.id, e.nombre_empleado, pr.nombre, p.id
ORDER BY e.nombre_empleado;

RESULTADO:

+-------------+-----------------+------------------+-----------+
| empleado_id | nombre_empleado | proveedor_nombre | pedido_id |
+-------------+-----------------+------------------+-----------+
|           3 | Daniela Herrera | Campuslands      |         1 |
+-------------+-----------------+------------------+-----------+


-------------------------------------------------------------------
| 		        Decimo Paso (Punto 10) 			  |
-------------------------------------------------------------------

10. Obtener el ingreso total de cada proveedor a partir de los productos vendidos.

para este punto, lo que queremos saber es el ingreso total de cada proveedor, es decir, cuanto ha ganado por producto vendido

SELECT 
  pr.id AS proveedor_id,
  pr.nombre AS nombre_proveedor,
  COALESCE(SUM(dp.cantidad * p.precio), 0) AS ingreso_total
FROM proveedores pr
LEFT JOIN productos p ON pr.id = p.proveedor_id
LEFT JOIN detallespedido dp ON p.id = dp.producto_id
GROUP BY pr.id, pr.nombre
ORDER BY ingreso_total DESC;


RESULTADO: 

+--------------+------------------+---------------+
| proveedor_id | nombre_proveedor | ingreso_total |
+--------------+------------------+---------------+
|            1 | Campuslands      |       3741.00 |
|            2 | PeluchinShop     |          0.00 |
+--------------+------------------+---------------+


